<?xml version="1.0" encoding="UTF-8"?>
<aiml>
	<category>
		<pattern>WHY * FUNCTIONAL TESTING</pattern>
		<template>The functional (or black-box) testing is done without considering the internal structure of the program, hence the testers don't have to have any knowledge of the algorithms or programming languages used. Also, the test cases only depend of the specification of the product, so the generation of the test data and the testing activity can be independent of the implementation of the program and can be applied without having an executable version of the code.</template>
	</category>
	<category>
		<pattern>WHAT * INFORMATION * FUNCTIONAL TESTING</pattern>
		<template>The functional (or black-box) testing requires the specification of the product, and only that. With this document, the test data can be created, and once the implementation of the program is complete, the testing activity can begin.</template>
	</category>
	<category>
		<pattern>WHAT INFORMATION * FUNCTIONAL TESTING</pattern>
		<template>The functional (or black-box) testing requires the specification of the product, and only that. With this document, the test data can be created, and once the implementation of the program is complete, the testing activity can begin.</template>
	</category>
	<category>
		<pattern>* ADVANTAGES * FUNCTIONAL TESTING</pattern>
		<template><srai>WHY USE FUNCTIONAL TESTING</srai></template>
	</category>
	<category>
		<pattern>* INPUT * FUNCTIONAL TESTING</pattern>
		<template>The functional (or black-box) testing requires the specification of the product, and only that. With this document, the test data can be created, and once the implementation of the program is complete, the testing activity can begin.</template>
	</category>
	<category>
		<pattern>WHAT TECHNIQUES * FUNCTIONAL TESTING</pattern>
		<template>The most common criteria used in functional testing are equivalence partitioning and boundary-value analysis.</template>
	</category>
	<category>
		<pattern>WHAT * TECHNIQUES * FUNCTIONAL TESTING</pattern>
		<template><srai>WHAT TECHNIQUES ARE USED IN FUNCTIONAL TESTING</srai></template>
	</category>
	<category>
		<pattern>WHAT CRITERIA * FUNCTIONAL TESTING</pattern>
		<template><srai>WHAT TECHNIQUES ARE USED IN FUNCTIONAL TESTING</srai></template>
	</category>
	<category>
		<pattern>WHAT * CRITERIA * FUNCTIONAL TESTING</pattern>
		<template><srai>WHAT TECHNIQUES ARE USED IN FUNCTIONAL TESTING</srai></template>
	</category>
	<category>
		<pattern>WHICH TECHNIQUES * FUNCTIONAL TESTING</pattern>
		<template><srai>WHAT TECHNIQUES ARE USED IN FUNCTIONAL TESTING</srai></template>
	</category>
	<category>
		<pattern>WHICH * TECHNIQUES * FUNCTIONAL TESTING</pattern>
		<template><srai>WHAT TECHNIQUES ARE USED IN FUNCTIONAL TESTING</srai></template>
	</category>
	<category>
		<pattern>WHICH CRITERIA * FUNCTIONAL TESTING</pattern>
		<template><srai>WHAT TECHNIQUES ARE USED IN FUNCTIONAL TESTING</srai></template>
	</category>
	<category>
		<pattern>WHICH * CRITERIA * FUNCTIONAL TESTING</pattern>
		<template><srai>WHAT TECHNIQUES ARE USED IN FUNCTIONAL TESTING</srai></template>
	</category>
	<category>
		<pattern>HOW * USE EQUIVALENCE PARTITIONING</pattern>
		<template>The equivalence partitioning criterion divides the input domain in several subsets (partitions) with no intersection and selects a test case for each partition. The idea is that each test case represents all input domain that partition class and, therefore, one test case for each class is enough for this testing criterion. The criterion considers valid and invalid equivalence classes.  For example, you can separate invalid and valid inputs into two different subsets or classes.</template>
	</category>
	<category>
		<pattern>HOW * APPLY EQUIVALENCE PARTITIONING</pattern>
		<template><srai>How to use equivalence partitioning</srai></template>
	</category>
	<category>
		<pattern>HOW * APPLY BOUNDARY VALUE</pattern>
		<template>The boundary-value testing criterion determines the boundaries for input values and selects the extremes of the boundary to generate test cases. For instance, if a program's valid input is a positive number less than 10, then the following test cases will be selected in order to test the boundaries: 0, 1, -1, 10, 9 and 11.</template>
	</category>
	<category>
		<pattern>HOW * USE BOUNDARY VALUE</pattern>
		<template><srai>How to use boundary value analysis</srai></template>
	</category>
	<category>
		<pattern>HOW * CREATE * TEST *</pattern>
		<template>It depends on the testing criterion used. <srai>How to use equivalence partitioning</srai> <srai>How to use boundary value analysis</srai></template>
	</category>
	<category>
		<pattern>HOW * GENERATE * TEST *</pattern>
		<template><srai>HOW TO CREATE A TEST SET</srai></template>
	</category>
	<category>
		<pattern>HOW * USE FUNCTIONAL TESTING</pattern>
		<template>It depends of the functional testing criterion used. The most common criteria used in functional testing are equivalence partitioning and boundary-value analysis. Please, ask me how to use equivalence partitioning criterion and/or boundary-value analysis criterion.</template>
	</category>
	<category>
		<pattern>HOW * APPLY * FUNCTIONAL TESTING</pattern>
		<template><srai>HOW TO USE FUNCTIONAL TESTING</srai></template>
	</category>
	<category>
		<pattern>COMMENT ON *</pattern>
		<template><srai>WHAT IS <star /></srai></template>
	</category>
</aiml>
