<?xml version="1.0" encoding="UTF-8"?>
<aiml>
	<category>
		<pattern>TELL ME *</pattern>
		<template><srai><star/></srai></template>
	</category>
	<category>
		<pattern>WHAT IS TESTING CRITERIA</pattern>
		<template>A testing criteria or technique is a set of rules which define the information to be used to create a test set, in order to fulfill some objective. For example, the white-box testing uses the information of the code’s structure to create a test set.</template>
	</category>
	<category>
		<pattern>WHAT IS * TESTING CRITERIA</pattern>
		<template>A testing criteria or technique is a set of rules which define the information to be used to create a test set, in order to fulfill some objective. For example, the white-box testing uses the information of the code’s structure to create a test set.</template>
	</category>
	<category>
		<pattern>WHAT IS TESTING</pattern>
		<template>Software testing is an activity of software engineering whose main goal is to validate the project requisites and to assert the software correctness, both before the deployment of the final product as well as during its maintenaice.</template>
	</category>
	<category>
		<pattern>WHAT IS * TESTING</pattern>
		<template>Software testing is an activity of software engineering whose main goal is to validate the project requisites and to assert the software correctness, both before the deployment of the final product as well as during its maintenaice.</template>
	</category>
	<category>
		<pattern>WHAT IS TESTING ACTIVITY</pattern>
		<template><srai>WHAT IS SOFTWARE TESTING</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * TESTING ACTIVITY</pattern>
		<template><srai>WHAT IS SOFTWARE TESTING</srai></template>
	</category>
	<category>
		<pattern>WHAT IS FAULT</pattern>
		<template>Fault is an incorrect step, process, or data definition in computer program. Fault is the formal name of a bug.</template>
	</category>
	<category>
		<pattern>WHAT IS * FAULT</pattern>
		<template>Fault is an incorrect step, process, or data definition in computer program. Fault is the formal name of a bug.</template>
	</category>
	<category>
		<pattern>WHAT IS FAILURE</pattern>
		<template>A failure is a result of the program which is incorrect or not expected. This is caused by an error.</template>
	</category>
	<category>
		<pattern>WHAT IS * FAILURE</pattern>
		<template>A failure is a result of the program which is incorrect or not expected. This is caused by an error.</template>
	</category>
	<category>
		<pattern>WHAT IS DEFECT</pattern>
		<template>A software defect or bug is a condition in a software product which doesn’t meet a software requirement or end-user expectation.</template>
	</category>
	<category>
		<pattern>WHAT IS * DEFECT</pattern>
		<template>A software defect or bug is a condition in a software product which doesn’t meet a software requirement or end-user expectation.</template>
	</category>
	<category>
		<pattern>WHAT IS BUG</pattern>
		<template><srai>WHAT IS DEFECT</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * BUG</pattern>
		<template><srai>WHAT IS DEFECT</srai></template>
	</category>
	<category>
		<pattern>WHAT IS ERROR</pattern>
		<template>An error is a state of execution of the program which is not expected and may lead to an incorrect result.</template>
	</category>
	<category>
		<pattern>WHAT IS * ERROR</pattern>
		<template>An error is a state of execution of the program which is not expected and may lead to an incorrect result.</template>
	</category>
	<category>
		<pattern>WHAT IS MISTAKE</pattern>
		<template>A mistake is a human action that inserts a fault (or defect) into the source code, for instance, a typo is a mistake.</template>
	</category>
	<category>
		<pattern>WHAT IS * MISTAKE</pattern>
		<template>A mistake is a human action that inserts a fault (or defect) into the source code, for instance, a typo is a mistake.</template>
	</category>
	<category>
		<pattern>WHAT IS INPUT DOMAIN</pattern>
		<template>The input domain is a set of values that can be used to execute a certain program. The input domain specifies all the possible sets of values.</template>
	</category>
	<category>
		<pattern>WHAT IS * INPUT DOMAIN</pattern>
		<template>The input domain is a set of values that can be used to execute a certain program. The input domain specifies all the possible sets of values.</template>
	</category>
	<category>
		<pattern>WHAT IS OUTPUT DOMAIN</pattern>
		<template>The output domain is the set of values produced by the execution of a certain program. The output domain specifies all the possible sets of values that can be generated.</template>
	</category>
	<category>
		<pattern>WHAT IS * OUTPUT DOMAIN</pattern>
		<template>The output domain is the set of values produced by the execution of a certain program. The output domain specifies all the possible sets of values that can be generated.</template>
	</category>
	<category>
		<pattern>WHAT IS TEST</pattern>
		<template>A test, in software testing, is the act of performing some assurance of both the correctness of a software and its validation of the project requisistes.</template>
	</category>
	<category>
		<pattern>WHAT IS * TEST</pattern>
		<template>A test, in software testing, is the act of performing some assurance of both the correctness of a software and its validation of the project requisistes.</template>
	</category>
	<category>
		<pattern>WHAT IS TEST DATA</pattern>
		<template>The test data (or test input) is the input data and the parameters associated with a specified test case.</template>
	</category>
	<category>
		<pattern>WHAT IS * TEST DATA</pattern>
		<template>The test data (or test input) is the input data and the parameters associated with a specified test case.</template>
	</category>
	<category>
		<pattern>WHAT IS TEST CASE</pattern>
		<template>A test case is composed by the test input, the execution conditions and the expected output to be produced by the program.</template>
	</category>
	<category>
		<pattern>WHAT IS * TEST CASE</pattern>
		<template>A test case is composed by the test input, the execution conditions and the expected output to be produced by the program.</template>
	</category>
	<category>
		<pattern>WHAT IS TEST SET</pattern>
		<template>The test set is composed by several test cases that are used in a software testing activity.</template>
	</category>
	<category>
		<pattern>WHAT IS * TEST SET</pattern>
		<template>The test set is composed by several test cases that are used in a software testing activity.</template>
	</category>
	<category>
		<pattern>WHAT IS TEST ORACLE</pattern>
		<template>An oracle is any human or mechanical agent that decides whether a program behaved correctly in a given test and accordingly results in a verdict of “pass” or “fail.” There exist many different kinds of oracles; for example, unambiguous requirements specifications, behavioral models, and code annotations. Automation of mechanized oracles can be difficult and expensive.</template>
	</category>
	<category>
		<pattern>WHAT IS * TEST ORACLE</pattern>
		<template>An oracle is any human or mechanical agent that decides whether a program behaved correctly in a given test and accordingly results in a verdict of “pass” or “fail.” There exist many different kinds of oracles; for example, unambiguous requirements specifications, behavioral models, and code annotations. Automation of mechanized oracles can be difficult and expensive.</template>
	</category>
	<category>
		<pattern>WHAT IS ORACLE</pattern>
		<template><srai>WHAT IS TEST ORACLE</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * ORACLE</pattern>
		<template><srai>WHAT IS TEST ORACLE</srai></template>
	</category>
	<category>
		<pattern>WHAT IS UNIT TESTING</pattern>
		<template>Unit testing verifies the functioning in isolation of software elements that are separately testable. Depending on the context, these could be the individual subprograms or a larger component made of highly cohesive units. Typically, unit testing occurs with access to the code being tested and with the support of supporting tools. The programmers who wrote the code typically, but not always, conduct unit testing.</template>
	</category>
	<category>
		<pattern>WHAT IS * UNIT TESTING</pattern>
		<template>Unit testing verifies the functioning in isolation of software elements that are separately testable. Depending on the context, these could be the individual subprograms or a larger component made of highly cohesive units. Typically, unit testing occurs with access to the code being tested and with the support of supporting tools. The programmers who wrote the code typically, but not always, conduct unit testing.</template>
	</category>
	<category>
		<pattern>WHAT IS INTEGRATION TESTING</pattern>
		<template>Integration testing is the process of verifying the interactions among software components. Classical integration testing strategies, such as top-down and bottom-up, are often used with hierarchically structured software.</template>
	</category>
	<category>
		<pattern>WHAT IS * INTEGRATION TESTING</pattern>
		<template>Integration testing is the process of verifying the interactions among software components. Classical integration testing strategies, such as top-down and bottom-up, are often used with hierarchically structured software.</template>
	</category>
	<category>
		<pattern>WHAT IS STRESS TESTING</pattern>
		<template>Stress testing exercises software at the maximum design load, as well as beyond it, with the goal of determining the behavioral limits, and to test defense mechanisms in critical systems.</template>
	</category>
	<category>
		<pattern>WHAT IS * STRESS TESTING</pattern>
		<template>Stress testing exercises software at the maximum design load, as well as beyond it, with the goal of determining the behavioral limits, and to test defense mechanisms in critical systems.</template>
	</category>
	<category>
		<pattern>WHAT IS FUNCTIONAL TESTING</pattern>
		<template>Functional testing (or Black Box Testing) is a technique whereby the system is tested against the functional requirements/specifications. During the functional testing the internal logic of the system being tested is not known to the tester. Functional testing ensures that the requirements are properly satisfied by the system. This type of testing is not concerned with how processing occurs, but rather, with the results of processing. It simulates actual system usage but does not make any system structure assumptions. Functional testing is normally performed during the levels of System Testing and Acceptance Testing. <think><set name="topic"> functional_testing </set> </think></template>
	</category>
	<category>
		<pattern>WHAT IS * FUNCTIONAL TESTING</pattern>
		<template>Functional testing (or Black Box Testing) is a technique whereby the system is tested against the functional requirements/specifications. During the functional testing the internal logic of the system being tested is not known to the tester. Functional testing ensures that the requirements are properly satisfied by the system. This type of testing is not concerned with how processing occurs, but rather, with the results of processing. It simulates actual system usage but does not make any system structure assumptions. Functional testing is normally performed during the levels of System Testing and Acceptance Testing. <think><set name="topic"> functional_testing </set> </think></template>
	</category>
	<category>
		<pattern>WHAT IS STRUCTURAL TESTING</pattern>
		<template>Structural testing (or White-Box testing) is a technique in which tests are derived from the knowledge of the software's structure or internal implementation. That way, the testing professional is able to check if a specific part of the code is correct. Unit testing is an instance of structural testing.</template>
	</category>
	<category>
		<pattern>WHAT IS * STRUCTURAL TESTING</pattern>
		<template>Structural testing (or White-Box testing) is a technique in which tests are derived from the knowledge of the software's structure or internal implementation. That way, the testing professional is able to check if a specific part of the code is correct. Unit testing is an instance of structural testing.</template>
	</category>
	<category>
		<pattern>WHAT IS EQUIVALENCE PARTITIONING</pattern>
		<template>Equivalence partitioning is a functional testing criterion that involves partitioning the input domain into a collection of subsets (or equivalent classes). Data in each partition must behave the same way therefore only one condition needs to be tested. Similarly, if one condition in a partition doesn’t work, then none of the others will work.</template>
	</category>
	<category>
		<pattern>WHAT IS * EQUIVALENCE PARTITIONING</pattern>
		<template>Equivalence partitioning is a functional testing criterion that involves partitioning the input domain into a collection of subsets (or equivalent classes). Data in each partition must behave the same way therefore only one condition needs to be tested. Similarly, if one condition in a partition doesn’t work, then none of the others will work.</template>
	</category>
	<category>
		<pattern>WHAT IS SYSTEM TESTING</pattern>
		<template>System testing is a level of software testing where a complete and integrated software is tested. The purpose of this test is to evaluate the system’s compliance with the specified requirements.</template>
	</category>
	<category>
		<pattern>WHAT IS * SYSTEM TESTING</pattern>
		<template>System testing is a level of software testing where a complete and integrated software is tested. The purpose of this test is to evaluate the system’s compliance with the specified requirements.</template>
	</category>
	<category>
		<pattern>WHAT IS ACCEPTANCE TESTING</pattern>
		<template>Acceptance testing is a level of software testing where a system is tested for acceptability. The purpose of this test is to evaluate the system’s compliance with the business requirements and assess whether it is acceptable for delivery.</template>
	</category>
	<category>
		<pattern>WHAT IS * ACCEPTANCE TESTING</pattern>
		<template>Acceptance testing is a level of software testing where a system is tested for acceptability. The purpose of this test is to evaluate the system’s compliance with the business requirements and assess whether it is acceptable for delivery.</template>
	</category>
	<category>
		<pattern>WHAT IS CRITERION TESTING</pattern>
		<template>A test selection criterion is a means of selecting test cases or determining that a set of test cases is sufficient for a specified purpose. Test adequacy criteria can be used to decide when sufficient testing will be, or has been accomplished.</template>
	</category>
	<category>
		<pattern>WHAT IS * CRITERION TESTING</pattern>
		<template>A test selection criterion is a means of selecting test cases or determining that a set of test cases is sufficient for a specified purpose. Test adequacy criteria can be used to decide when sufficient testing will be, or has been accomplished.</template>
	</category>
	<category>
		<pattern>WHAT IS BOUNDARY VALUE</pattern>
		<template>Boundary value analysis is a functional testing criterion which test data are chosen on or near the boundaries of the input domain of variables, with the underlying rationale that many faults tend to concentrate near the extreme values of inputs. An extension of this technique is robustness testing, wherein test cases are also chosen outside the input domain of variables to test program robustness in processing unexpected or erroneous inputs.</template>
	</category>
	<category>
		<pattern>WHAT IS * BOUNDARY VALUE</pattern>
		<template>Boundary value analysis is a functional testing criterion which test data are chosen on or near the boundaries of the input domain of variables, with the underlying rationale that many faults tend to concentrate near the extreme values of inputs. An extension of this technique is robustness testing, wherein test cases are also chosen outside the input domain of variables to test program robustness in processing unexpected or erroneous inputs.</template>
	</category>
	<category>
		<pattern>WHAT IS SYSTEMATIC FUNCTIONAL TESTING</pattern>
		<template>Systematic Functional Testing combines the boundary value analysis and equivalence partitioning criteria. When the input and output domains have been partitioned, this criterion requests at least two test cases for each partition, in order to minimize issues associated to defects which are capable of leading to failures.</template>
	</category>
	<category>
		<pattern>WHAT IS * SYSTEMATIC FUNCTIONAL TESTING</pattern>
		<template>Systematic Functional Testing combines the boundary value analysis and equivalence partitioning criteria. When the input and output domains have been partitioned, this criterion requests at least two test cases for each partition, in order to minimize issues associated to defects which are capable of leading to failures.</template>
	</category>
	<category>
		<pattern>WHAT IS CAUSE-EFFECT GRAPH</pattern>
		<template>Cause Effect Graph is a functional testing criterion that graphically illustrates the relationship among a given outcome and all the factors that influence the outcome. It is also known as Ishikawa diagram as it was invented by Kaoru Ishikawa or fish bone diagram because of the way it looks.</template>
	</category>
	<category>
		<pattern>WHAT IS * CAUSE-EFFECT GRAPH</pattern>
		<template>Cause Effect Graph is a functional testing criterion that graphically illustrates the relationship among a given outcome and all the factors that influence the outcome. It is also known as Ishikawa diagram as it was invented by Kaoru Ishikawa or fish bone diagram because of the way it looks.</template>
	</category>
	<category>
		<pattern>WHAT IS LIMIT VALUE</pattern>
		<template>The limit values are generally the boundaries of an interval in which the input is well defined, i.e. the boundaries of the input domain.</template>
	</category>
	<category>
		<pattern>WHAT IS * LIMIT VALUE</pattern>
		<template>The limit values are generally the boundaries of an interval in which the input is well defined, i.e. the boundaries of the input domain.</template>
	</category>
	<category>
		<pattern>WHAT IS EQUIVALENCY CLASS</pattern>
		<template><srai>WHAT IS EQUIVALENCY CLASS</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * EQUIVALENCY CLASS</pattern>
		<template><srai>WHAT IS EQUIVALENCY CLASS</srai></template>
	</category>
	<category>
		<pattern>WHAT IS EQUIVALENCE CLASS</pattern>
		<template>An equivalency class represents a set of valid and invalid states for the input conditions. For example, if your input must be a number N between 1 and 100, then one (invalid) equivalency class is the set of numbers less than one, another (invalid) equivalency class is the set of numbers greater than 100 and the third (valid) is the set of numbers between 1 and 100.</template>
	</category>
	<category>
		<pattern>WHAT IS * EQUIVALENCE CLASS</pattern>
		<template>An equivalency class represents a set of valid and invalid states for the input conditions. For example, if your input must be a number N between 1 and 100, then one (invalid) equivalency class is the set of numbers less than one, another (invalid) equivalency class is the set of numbers greater than 100 and the third (valid) is the set of numbers between 1 and 100.</template>
	</category>
	<category>
		<pattern>WHAT IS FAULT-BASED TESTING</pattern>
		<template>The fault-based testing is a technique to create test sets that uses the information of the most likely and predefined faults. Hence, the test cases chosen have are better at revealing those likely faults (if present) in the program. To better focus the test case generation or selection, a fault model can be introduced that classifies the different types of faults.</template>
	</category>
	<category>
		<pattern>WHAT IS * FAULT-BASED TESTING</pattern>
		<template>The fault-based testing is a technique to create test sets that uses the information of the most likely and predefined faults. Hence, the test cases chosen have are better at revealing those likely faults (if present) in the program. To better focus the test case generation or selection, a fault model can be introduced that classifies the different types of faults.</template>
	</category>
	<category>
		<pattern>WHAT IS FAULT BASED TESTING</pattern>
		<template><srai>WHAT IS FAULT-BASED TESTING</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * FAULT BASED TESTING</pattern>
		<template><srai>WHAT IS FAULT-BASED TESTING</srai></template>
	</category>
	<category>
		<pattern>WHAT IS DATA TEST</pattern>
		<template><srai>WHAT IS TEST DATA</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * DATA TEST</pattern>
		<template><srai>WHAT IS TEST DATA</srai></template>
	</category>
	<category>
		<pattern>WHAT IS STATE TRANSITION</pattern>
		<template>It is a criteria within functional testing, but I still don’t have enough knowledge about that, sorry…</template>
	</category>
	<category>
		<pattern>WHAT IS * STATE TRANSITION</pattern>
		<template>It is a criteria within functional testing, but I still don’t have enough knowledge about that, sorry…</template>
	</category>
	<category>
		<pattern>WHAT IS STATE TRANSITION TESTING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * STATE TRANSITION TESTING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS ERROR GUESSING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * ERROR GUESSING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS ERROR GUESSING TESTING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * ERROR GUESSING TESTING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS SYNTAX TESTING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * SYNTAX TESTING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS GRAPH MATRIX</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * GRAPH MATRIX</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS GRAPH MATRIX TESTING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
	<category>
		<pattern>WHAT IS * GRAPH MATRIX TESTING</pattern>
		<template><srai>WHAT IS STATE TRANSITION</srai></template>
	</category>
</aiml>
