intents:
  - greet
  - bye
  - thank
  - how_to_use
  - cite_example
  - define

slots:
  concept:
    type: categorical
    values:
      - all nodes
      - all edges
      - all paths
      - requirement all nodes
      - requirement all edges
      - requirement all paths
      - cyclomatic complexity
      - control flow graph
      - node
      - edge
      - cycle
      - graph
      - predicate node
      - path
      - simple path
      - complete path
      - control flow
      - data flow
      - if
      - for
      - while
      - do while
      - switch
      - non executable path
      - path execution
      - primitive edge
      - software testing
      - functional testing
      - equivalence partitioning
      - boundary value
      - mistake
      - error
      - defect
      - failure
      - input domain
      - equivalence class
      - testing criteria
      - testing
      - output domain
      - test
      - test data
      - test case
      - test set
      - oracle
      - unit testing
      - integration testing
      - stress testing
      - structural testing
      - system testing
      - acceptance testing
      - criteria testing
      - systematic functional testing
      - cause-effect graph
      - limit value
      - fault based testing
      - state transition

entities:
  - concept

responses:
  utter_noworries:
    - text: No worries!

  utter_greet:
    - text: Hi

  utter_bye:
    - text: Bye!

  utter_default:
    - text: "Sorry, I didn't quite catch that"
    - text: "Sorry, I didn't understand your question, could you repeat?"
    - text: "I don't understand what you mean"

  # HOW TO USE
  utter_how_to_use_all_nodes:
    - text: "To create a test set using the all-nodes criterion for your program, you first need to draw the CFG of it (ask me how to do that if you don’t know yet). Then you have to analyse, for each node of your program, what your input must look like so that this node is executed. For example, if you have an if statement such as ```if(A > 0) print(‘A is positive); ``` in your program, you know that the node corresponding to the ```print``` command will only be executed when ```A``` is positive, and so you must insert at least one test case as such. More complex programs will require a deeper analysis, which most of the times will involve more mathematics skills than software testing ones."

  utter_how_to_use_all_edges:
    - text: "To create a test set using the all-edges criterion for your program, you first need to draw the CFG of it (ask me how to do that if you don’t know yet). Then, one approach for generating the test set is to analyse, for each branch of the CFG, what the input must look like so that this branch is executed. For example, if you have an IF statement such as ```if(strlen(s) == 0) break;```, you must consider at least one test case where ```s``` is empty and the edge corresponding to this ```break``` statement will be exercised. However, this approach may be difficult and require very deep analysis for complex programs and algorithms."

  utter_how_to_use_cyclomatic_complexity:
    - text: "To create a test set using the McCabe criterion, first write down a complete path always making decisions in predicate nodes to avoid loops (or the first path could be the result of a random real input). Then, the following paths should be equal to the previous one, but changing the decision of the first predicate node not changed yet. After you cannot add any more paths, you have exactly C paths, where C is the McCabe complexity of your CFG. You should create test cases the exercise this paths. This test set also has the property that it satisfies statement coverage and branch coverage criterions."

  utter_how_to_use_control_flow_graph:
    - text: "The control flow graph is very easy to create. The CFG of a sequential program with no control flow deviations is simply a single node. In a more complex program, with loops and conditional statements, the graph gains some edges, but you are able to draw any CFG if you are able to represent usual components of programs, like IFs, WHILEs and so. Ask me how to represent that."

  utter_how_to_use_functional_testing:
    - text: "It depends of the functional testing criterion used. The most common criteria used in functional testing are equivalence partitioning and boundary-value analysis. Please, ask me how to use equivalence partitioning criterion and/or boundary-value analysis criterion"

  utter_how_to_use_equivalence_partitioning:
    - text: "The equivalence partitioning criterion divides the input domain in several subsets (partitions) with no intersection and selects a test case for each partition. The idea is that each test case represents all input domain that partition class and, therefore, one test case for each class is enough for this testing criterion. The criterion considers valid and invalid equivalence classes. For example, you can separate invalid and valid inputs into two different subsets or classes."

  utter_how_to_use_boundary_value:
    - text: "The boundary-value testing criterion determines the boundaries for input values and selects the extremes of the boundary to generate test cases. For instance, if a program's valid input is a positive number less than 10, then the following test cases will be selected in order to test the boundaries: 0, 1, -1, 10, 9 and 11."

  # EXAMPLE
  utter_example_functional_testing:
    - text: "In functional testing technique, the functionality of an application is tested by providing inputs to generate the desired outputs. Consider a bus ticket purchase system with the following requirement: The discount amount is calculated as follows: students can purchase up to 100 tickets per month, with a 50% discount; workers can buy up to 50 tickets a month, with a 30% discount; other users do not have discount on the ticket price. The functional testing concentrates in selection of test input (or data test) to test this functionality, for instance, selecting test input for each class of user of the bus (student, worker and others)."

  utter_example_equivalence_partitioning:
    - text: "Here is an example of an application of equivalence class partitioning. Consider the following specification: one of the fields of a form is a text box that accepts numeric values from 18 to 25. For this problem, a value that belongs to an invalid equivalence class is 17, whereas a value belonging to a valid equivalence class is, for instance, 20."
    - text: "Here is an example of an application of equivalence class partitioning. Consider the following specification: a switch is turned off when the temperature falls below 18˚C and is turned on again when it begomes greater than 21˚C. In this problem, some equivalence values belonging to the same classes are 22, 23 and 24."
    - text: "Here is an example of an application of equivalence class partitioning. Consider the following specification: if you are below 18 years old, you are too young to be insured. If you are between 18 and 30 years old, you will get a 20% discount, but you are not eligible for an insurance if you are past 30. In this problem, the ages 18, .., 30 are in the same equivalence class."
    - text: "Consider the specification. A program validates a field in the following way: values less than 10 are rejected, values between 10 and 21 are accepted and values greater or equal to 22 are rejected. In this problem, the values 3, 10 and 22 cover all the existing equivalence classes."

  utter_example_boundary_value:
    - text: "Suppose you have a program that grants access to a certain web page only if you are 18 years old or older. So a boundary value analysis criteria used for this program would generate test cases for age inputs of 17 and 18."
    - text: "Suppose you have a program in which the user has to create a password with length between 6 and 12. So the test cases generated for this program, using the boundary value analysis technique, would be for passwords with lengths 5, 6, 12 and 13. "

  utter_example_mistake:
    - text: "The mistake is the act of, by some reason, introducing a defect in the software. It could be a typo while coding, which makes a for loop start from 1 instead of 0, and therefore introduce a mistake."
    - text: "The mistake is the act of, by some reason, introducing a defect in the software. It could be a typo while coding, which makes a for loop start from 1 instead of 0, and therefore introduce a mistake."

  utter_example_error:
    - text: "An example of an error could be the access of some unintended position of a vector, which would case a segmentation fault and stop the execution of the program."
    - text: "Suppose you have a program that calculates the factorial of some input integer, but this program uses integers instead of long integers. An error would occur if you input some number that would cause an overflow in the program."

  utter_example_defect:
    - text: "A defect is an incorrect data definition. In your code, it could be an access of inexistent position in a vector, for instance."
    - text: "Suppose you have a program that, by the software requirements, should accept names with up to 20 digits, but the software developer reserved only 15 digits in the database. That is a defect in the software definition and can lead to an error."

  utter_example_failure:
    - text: "A failure occurs when the output of your program is different than expected. So a failure can occur when your factorial calculator program outputs an overflowed result, which is the result of an overflow error during it’s execution."

  utter_example_input_domain:
    - text: "Suppose you have a program that, given a date in the year outputs the sign of the person born in that day. Your input domain, in this case, is the set of all the 365 days in the year."
    - text: "Suppose your input is a string with exactly 16 digits and containing only lower case letters, then the input domain consists of 26^16 possibilities"

  utter_example_equivalence_class:
    - text: "In software testing, an equivalency class could be the set of strings of size less than or equal to 8, for example.In software testing, an equivalency class could be the set of strings of size less than or equal to 8, for example."

  utter_example_if:
    - text: "An if statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/if.png"

  utter_example_for:
    - text: "A for statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/for.png"

  utter_example_while:
    - text: "A while statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/while.png"

  utter_example_do_while:
    - text: "A do while statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/do_while.png"

  utter_example_switch:
    - text: "A switch or case statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/case.png"

  # DEFINITION
  utter_definition_all_nodes:
    - text: "The all-nodes or all-states or block coverage criterion is a structural testing criterion which involves creating a test set such that, after the program is executed on this test set, every node of the CFG (Control Flow Graph) is visited at least once."

  utter_definition_all_edges:
    - text: "The all-edges or branch coverage criterion is a structural testing criterion which involves creating a test set such that, after the program is executed on this test set, every edge of the CFG (Control Flow Graph) of the program is traversed at least once. This motivates exercising different decisions in predicate nodes, as well as breaks inside loops and returns in functions."

  utter_definition_all_paths:
    - text: "The all-paths or pah coverage criterion is a structural testing criterion which involves creating a test set such that, after the program is executed on this test set, every possible complete path of the CFG (Control Flow Graph) of the program is traversed at least once. This is a requisite very difficult to accomplish, since the number of paths can grow exponentially, and some of them might not even be executable."

  utter_definition_requirement_all_nodes:
    - text: "The minimum test requirement of all-nodes or statement coverage criterion is the guarantee that all statements of the program have been executed by at least one test case."

  utter_definition_requirement_all_edges:
    - text: "The minimum test requirement of all-edges or branch coverage criterion is that every branch of control flow of the program has been executed at least once."

  utter_definition_requirement_all_paths:
    - text: "The minimum test requirement of all-paths criterions is that every path from the start node of the CFG to the exit node has been traversed at least once in the execution of a test set."

  utter_definition_cyclomatic_complexity:
    - text: "The cyclomatic complexity of a program is a metric defined by McCabe to measure the complexity of a program. It is defined by C = E – V + 2, where C is the complexity, V is the number of vertices and E is the number of edges. It can also be obtained by the number of predicate nodes plus one."

  utter_definition_control_flow_graph:
    - text: "The control flow graph (CFG) is a graph representation of a certain program, in which the nodes correspond to sequences of instructions, edges correspond to path decisions (e.g. an if statement) and the start node corresponds to the beginning of the program. The CFG is a very important tool in white-box testing, because it represents very well the structure of the program."

  utter_definition_node:
    - text: "A node in a control flow graph represents a group of instructions that are always executed together. They are the circles of the graph."

  utter_definition_edge:
    - text: "An edge represents a connection between two groups of instructions. The edges are the arrows of the graph."

  utter_definition_cycle:
    - text: "A cycle is a path that connects the first node to the last. They are usually the loops in CFG."

  utter_definition_graph:
    - text: "A graph is a mathematical tool used to represent elements that connect to each other. It is composed by nodes (circles) and edges (arrows), where the nodes are the elements we want to represent and the edges are the connections between them."

  utter_definition_predicate_node:
    - text: "A predicate node is a node that has more than one out-edge. A classic example is the condition of an if statement."

  utter_definition_path:
    - text: "A path a list of nodes that can be traversed sequentially, following it’s edges. In CFG, a path represents the execution of the program for some specific input."

  utter_definition_simple_path:
    - text: "A simple path is a path with no repeated nodes."

  utter_definition_complete_path:
    - text: "A complete path in a CFG is a path where it’s first node is an entry node and the last is an exit node."

  utter_definition_control_flow:
    - text: "The control flow is the flow of instructions that are executed in a program. The control flow graph is a modeling of possible paths and flow of instructions that can occur in the execution of a specific program."

  utter_definition_data_flow:
    - text: "The data flow is the flow of data or information handled by a program. It is another area of study in software testing and engineering, that focus on analysing the sequence of procedures and paths some given piece of data is used and processed at."

  utter_definition_non_executable_path:
    - text: "A non executable path is a path in the CFG graph for which there is no data input that causes the execution of it."

  utter_definition_path_execution:
    - text: "A path execution is the execution, in sequence, of the statements of every node in it."

  utter_definition_primitive_edge:
    - text: "Primitive edges are all edges coming out of predicate nodes, that may or may not be traversed."

  utter_definition_software_testing:
    - text: "Software testing is an activity of software engineering whose main goal is to validate the project requisites and to assert the software correctness, both before the deployment of the final product as well as during its maintenance."

  utter_definition_functional_testing:
    - text: "Functional testing (or Black Box Testing) is a technique whereby the system is tested against the functional requirements/specifications. During the functional testing the internal logic of the system being tested is not known to the tester. Functional testing ensures that the requirements are properly satisfied by the system. This type of testing is not concerned with how processing occurs, but rather, with the results of processing. It simulates actual system usage but does not make any system structure assumptions. Functional testing is normally performed during the levels of System Testing and Acceptance Testing."

  utter_definition_equivalence_partitioning:
    - text: "Equivalence partitioning is a functional testing criterion that involves partitioning the input domain into a collection of subsets (or equivalent classes). Data in each partition must behave the same way therefore only one condition needs to be tested. Similarly, if one condition in a partition doesn’t work, then none of the others will work."

  utter_definition_boundary_value:
    - text: "Boundary value analysis is a functional testing criterion which test data are chosen on or near the boundaries of the input domain of variables, with the underlying rationale that many faults tend to concentrate near the extreme values of inputs. An extension of this technique is robustness testing, wherein test cases are also chosen outside the input domain of variables to test program robustness in processing unexpected or erroneous inputs."

  utter_definition_mistake:
    - text: "A mistake is a human action that inserts a fault (or defect) into the source code, for instance, a typo is a mistake."

  utter_definition_error:
    - text: "An error is a state of execution of the program which is not expected and may lead to an incorrect result."

  utter_definition_defect:
    - text: "Fault is an incorrect step, process, or data definition in computer program. Fault is the formal name of a bug. A software defect or bug is a condition in a software product which doesn’t meet a software requirement or end-user expectation."

  utter_definition_failure:
    - text: "A failure is a result of the program which is incorrect or not expected. This is caused by an error."

  utter_definition_input_domain:
    - text: "The input domain is a set of values that can be used to execute a certain program. The input domain specifies all the possible sets of values."

  utter_definition_equivalence_class:
    - text: "An equivalency class represents a set of valid and invalid states for the input conditions. For example, if your input must be a number N between 1 and 100, then one (invalid) equivalency class is the set of numbers less than one, another (invalid) equivalency class is the set of numbers greater than 100 and the third (valid) is the set of numbers between 1 and 100."

  utter_definition_testing_criteria:
    - text: "A testing criteria or technique is a set of rules which define the information to be used to create a test set, in order to fulfill some objective. For example, the white-box testing uses the information of the code’s structure to create a test set."

  utter_definition_testing:
    - text: "Software testing is an activity of software engineering whose main goal is to validate the project requisites and to assert the software correctness, both before the deployment of the final product as well as during its maintenaice."

  utter_definition_output_domain:
    - text: "The output domain is the set of values produced by the execution of a certain program. The output domain specifies all the possible sets of values that can be generated."

  utter_definition_test:
    - text: "A test, in software testing, is the act of performing some assurance of both the correctness of a software and its validation of the project requisistes."

  utter_definition_test_data:
    - text: "The test data (or test input) is the input data and the parameters associated with a specified test case."

  utter_definition_test_case:
    - text: "A test case is composed by the test input, the execution conditions and the expected output to be produced by the program."

  utter_definition_test_set:
    - text: "The test set is composed by several test cases that are used in a software testing activity."

  utter_definition_oracle:
    - text: "An oracle is any human or mechanical agent that decides whether a program behaved correctly in a given test and accordingly results in a verdict of “pass” or “fail.” There exist many different kinds of oracles; for example, unambiguous requirements specifications, behavioral models, and code annotations. Automation of mechanized oracles can be difficult and expensive."

  utter_definition_unit_testing:
    - text: "Unit testing verifies the functioning in isolation of software elements that are separately testable. Depending on the context, these could be the individual subprograms or a larger component made of highly cohesive units. Typically, unit testing occurs with access to the code being tested and with the support of supporting tools. The programmers who wrote the code typically, but not always, conduct unit testing."

  utter_definition_integration_testing:
    - text: "Integration testing is the process of verifying the interactions among software components. Classical integration testing strategies, such as top-down and bottom-up, are often used with hierarchically structured software."

  utter_definition_stress_testing:
    - text: "Stress testing exercises software at the maximum design load, as well as beyond it, with the goal of determining the behavioral limits, and to test defense mechanisms in critical systems."

  utter_definition_structural_testing:
    - text: "Structural testing (or White-Box testing) is a technique in which tests are derived from the knowledge of the software's structure or internal implementation. That way, the testing professional is able to check if a specific part of the code is correct. Unit testing is an instance of structural testing."

  utter_definition_system_testing:
    - text: "System testing is a level of software testing where a complete and integrated software is tested. The purpose of this test is to evaluate the system’s compliance with the specified requirements."

  utter_definition_acceptance_testing:
    - text: "Acceptance testing is a level of software testing where a system is tested for acceptability. The purpose of this test is to evaluate the system’s compliance with the business requirements and assess whether it is acceptable for delivery."

  utter_definition_criteria_testing:
    - text: "A test selection criterion is a means of selecting test cases or determining that a set of test cases is sufficient for a specified purpose. Test adequacy criteria can be used to decide when sufficient testing will be, or has been accomplished."

  utter_definition_systematic_functional_testing:
    - text: "Systematic Functional Testing combines the boundary value analysis and equivalence partitioning criteria. When the input and output domains have been partitioned, this criterion requests at least two test cases for each partition, in order to minimize issues associated to defects which are capable of leading to failures."

  utter_definition_cause-effect_graph:
    - text: "Cause Effect Graph is a functional testing criterion that graphically illustrates the relationship among a given outcome and all the factors that influence the outcome. It is also known as Ishikawa diagram as it was invented by Kaoru Ishikawa or fish bone diagram because of the way it looks."

  utter_definition_limit_value:
    - text: "The limit values are generally the boundaries of an interval in which the input is well defined, i.e. the boundaries of the input domain."

  utter_definition_fault_based_testing:
    - text: "The fault-based testing is a technique to create test sets that uses the information of the most likely and predefined faults. Hence, the test cases chosen have are better at revealing those likely faults (if present) in the program. To better focus the test case generation or selection, a fault model can be introduced that classifies the different types of faults."

  utter_definition_state_transition:
    - text: "It is a criteria within functional testing, but I still don’t have enough knowledge about that, sorry…"

session_config:
  session_expiration_time: 60  # value in minutes, 0 means infinitely long
  carry_over_slots_to_new_session: true  # set to false to forget slots between sessions

