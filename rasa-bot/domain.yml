intents:
  - greet
  - bye
  - thank
  - how_to_use
  - cite_example

slots:
  concept:
    type: categorical
    values:
      - all nodes
      - all edges
      - all paths
      - requirement all nodes
      - requirement all edges
      - requirement all paths
      - cyclomatic complexity
      - control flow graph
      - node
      - edge
      - cycle
      - graph
      - predicate node
      - path
      - simple path
      - complete path
      - control flow
      - data flow
      - if
      - for
      - while
      - do while
      - switch
      - non executable path
      - path execution
      - primitive edge
      - software testing
      - functional testing
      - equivalence partitioning
      - boundary value
      - mistake
      - error
      - defect
      - failure
      - input domain
      - equivalence class
      - testing criteria
      - testing
      - output domain
      - test
      - test data
      - test case
      - test set
      - oracle
      - unit testing
      - integration testing
      - stress testing
      - structural testing
      - system testing
      - acceptance testing
      - criteria testing
      - systematic functional testing
      - cause-effect graph
      - limit value
      - fault based testing
      - state transition

entities:
  - concept

responses:
  utter_noworries:
    - text: No worries!

  utter_greet:
    - text: Hi

  utter_bye:
    - text: Bye!

  utter_default:
    - text: "Sorry, I didn't quite catch that"
    - text: "Sorry, I didn't understand your question, could you repeat?"
    - text: "I don't understand what you mean"

  # HOW TO USE
  utter_how_to_use_all_nodes:
    - text: "To create a test set using the all-nodes criterion for your program, you first need to draw the CFG of it (ask me how to do that if you don’t know yet). Then you have to analyse, for each node of your program, what your input must look like so that this node is executed. For example, if you have an if statement such as ```if(A > 0) print(‘A is positive); ``` in your program, you know that the node corresponding to the ```print``` command will only be executed when ```A``` is positive, and so you must insert at least one test case as such. More complex programs will require a deeper analysis, which most of the times will involve more mathematics skills than software testing ones."

  utter_how_to_use_all_edges:
    - text: "To create a test set using the all-edges criterion for your program, you first need to draw the CFG of it (ask me how to do that if you don’t know yet). Then, one approach for generating the test set is to analyse, for each branch of the CFG, what the input must look like so that this branch is executed. For example, if you have an IF statement such as ```if(strlen(s) == 0) break;```, you must consider at least one test case where ```s``` is empty and the edge corresponding to this ```break``` statement will be exercised. However, this approach may be difficult and require very deep analysis for complex programs and algorithms."

  utter_how_to_use_cyclomatic_complexity:
    - text: "To create a test set using the McCabe criterion, first write down a complete path always making decisions in predicate nodes to avoid loops (or the first path could be the result of a random real input). Then, the following paths should be equal to the previous one, but changing the decision of the first predicate node not changed yet. After you cannot add any more paths, you have exactly C paths, where C is the McCabe complexity of your CFG. You should create test cases the exercise this paths. This test set also has the property that it satisfies statement coverage and branch coverage criterions."

  utter_how_to_use_control_flow_graph:
    - text: "The control flow graph is very easy to create. The CFG of a sequential program with no control flow deviations is simply a single node. In a more complex program, with loops and conditional statements, the graph gains some edges, but you are able to draw any CFG if you are able to represent usual components of programs, like IFs, WHILEs and so. Ask me how to represent that."

  utter_how_to_use_functional_testing:
    - text: "It depends of the functional testing criterion used. The most common criteria used in functional testing are equivalence partitioning and boundary-value analysis. Please, ask me how to use equivalence partitioning criterion and/or boundary-value analysis criterion"

  utter_how_to_use_equivalence_partitioning:
    - text: "The equivalence partitioning criterion divides the input domain in several subsets (partitions) with no intersection and selects a test case for each partition. The idea is that each test case represents all input domain that partition class and, therefore, one test case for each class is enough for this testing criterion. The criterion considers valid and invalid equivalence classes. For example, you can separate invalid and valid inputs into two different subsets or classes."

  utter_how_to_use_boundary_value:
    - text: "The boundary-value testing criterion determines the boundaries for input values and selects the extremes of the boundary to generate test cases. For instance, if a program's valid input is a positive number less than 10, then the following test cases will be selected in order to test the boundaries: 0, 1, -1, 10, 9 and 11."

  # EXAMPLE
  utter_example_functional_testing:
    - text: "In functional testing technique, the functionality of an application is tested by providing inputs to generate the desired outputs. Consider a bus ticket purchase system with the following requirement: The discount amount is calculated as follows: students can purchase up to 100 tickets per month, with a 50% discount; workers can buy up to 50 tickets a month, with a 30% discount; other users do not have discount on the ticket price. The functional testing concentrates in selection of test input (or data test) to test this functionality, for instance, selecting test input for each class of user of the bus (student, worker and others)."

  utter_example_equivalence_partitioning:
    - text: "Here is an example of an application of equivalence class partitioning. Consider the following specification: one of the fields of a form is a text box that accepts numeric values from 18 to 25. For this problem, a value that belongs to an invalid equivalence class is 17, whereas a value belonging to a valid equivalence class is, for instance, 20."
    - text: "Here is an example of an application of equivalence class partitioning. Consider the following specification: a switch is turned off when the temperature falls below 18˚C and is turned on again when it begomes greater than 21˚C. In this problem, some equivalence values belonging to the same classes are 22, 23 and 24."
    - text: "Here is an example of an application of equivalence class partitioning. Consider the following specification: if you are below 18 years old, you are too young to be insured. If you are between 18 and 30 years old, you will get a 20% discount, but you are not eligible for an insurance if you are past 30. In this problem, the ages 18, .., 30 are in the same equivalence class."
    - text: "Consider the specification. A program validates a field in the following way: values less than 10 are rejected, values between 10 and 21 are accepted and values greater or equal to 22 are rejected. In this problem, the values 3, 10 and 22 cover all the existing equivalence classes."

  utter_example_boundary_value:
    - text: "Suppose you have a program that grants access to a certain web page only if you are 18 years old or older. So a boundary value analysis criteria used for this program would generate test cases for age inputs of 17 and 18."
    - text: "Suppose you have a program in which the user has to create a password with length between 6 and 12. So the test cases generated for this program, using the boundary value analysis technique, would be for passwords with lengths 5, 6, 12 and 13. "

  utter_example_mistake:
    - text: "The mistake is the act of, by some reason, introducing a defect in the software. It could be a typo while coding, which makes a for loop start from 1 instead of 0, and therefore introduce a mistake."
    - text: "The mistake is the act of, by some reason, introducing a defect in the software. It could be a typo while coding, which makes a for loop start from 1 instead of 0, and therefore introduce a mistake."

  utter_example_error:
    - text: "An example of an error could be the access of some unintended position of a vector, which would case a segmentation fault and stop the execution of the program."
    - text: "Suppose you have a program that calculates the factorial of some input integer, but this program uses integers instead of long integers. An error would occur if you input some number that would cause an overflow in the program."

  utter_example_defect:
    - text: "A defect is an incorrect data definition. In your code, it could be an access of inexistent position in a vector, for instance."
    - text: "Suppose you have a program that, by the software requirements, should accept names with up to 20 digits, but the software developer reserved only 15 digits in the database. That is a defect in the software definition and can lead to an error."

  utter_example_failure:
    - text: "A failure occurs when the output of your program is different than expected. So a failure can occur when your factorial calculator program outputs an overflowed result, which is the result of an overflow error during it’s execution."

  utter_example_input_domain:
    - text: "Suppose you have a program that, given a date in the year outputs the sign of the person born in that day. Your input domain, in this case, is the set of all the 365 days in the year."
    - text: "Suppose your input is a string with exactly 16 digits and containing only lower case letters, then the input domain consists of 26^16 possibilities"

  utter_example_equivalence_class:
    - text: "In software testing, an equivalency class could be the set of strings of size less than or equal to 8, for example.In software testing, an equivalency class could be the set of strings of size less than or equal to 8, for example."

  utter_example_if:
    - text: "An if statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/if.png"

  utter_example_for:
    - text: "A for statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/for.png"

  utter_example_while:
    - text: "A while statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/while.png"

  utter_example_do_while:
    - text: "A do while statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/do_while.png"

  utter_example_switch:
    - text: "A switch or case statement can be represented as in the picture below:"
      image: "http://www.labes.icmc.usp.br/~tob-stt/resources/case.png"

session_config:
  session_expiration_time: 60  # value in minutes, 0 means infinitely long
  carry_over_slots_to_new_session: true  # set to false to forget slots between sessions

