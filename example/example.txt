-^ ?example? ^ ?functional_testing? ^
>In functional testing technique, the functionality of an application is tested by providing inputs to generate the desired outputs. Consider a bus ticket purchase system with the following requirement: The discount amount is calculated as follows: students can purchase up to 100 tickets per month, with a 50% discount; workers can buy up to 50 tickets a month, with a 30% discount; other users do not have discount on the ticket price. The functional testing concentrates in selection of test input (or data test) to test this functionality, for instance, selecting test input for each class of user of the bus (student, worker and others). <think> <set name = "topic">functional testing</set> </think>

-^ ?example? ^ ?equivalence_partitioning? ^
><random><li>Here is an example of an application of equivalence class partitioning. Consider the following specification: one of the fields of a form is a text box that accepts numeric values from 18 to 25. For this problem, a value that belongs to an invalid equivalence class is 17, whereas a value belonging to a valid equivalence class is, for instance, 20.</li> <li>Here is an example of an application of equivalence class partitioning. Consider the following specification: a switch is turned off when the temperature falls below 18˚C and is turned on again when it begomes greater than 21˚C. In this problem, some equivalence values belonging to the same classes are 22, 23 and 24.</li> <li>Here is an example of an application of equivalence class partitioning. Consider the following specification: if you are below 18 years old, you are too young to be insured. If you are between 18 and 30 years old, you will get a 20% discount, but you are not elegible for an insurance if you are past 30. In this problem, the ages 18, .., 30 are in the same equivalence class</li><li>Consider the specification. A program validates a field in the following way: values less than 10 are rejected, values between 10 and 21 are accepted and values greater or equal to 22 are rejected. In this problem, the values 3, 10 and 22 cover all the existing equivalence classes.</li></random> <think> <set name = "topic">equivalence partitioning</set> </think>

-^ ?example? ^ ?boundary_value_analysis? ^
><random><li>Suppose you have a program that grants access to a certain web page only if you are 18 years old or older. So a boundary value analysis criteria used for this program would generate test cases for age inputs of 17 and 18</li><li>Suppose you have a program in which the user has to create a password with length between 6 and 12. So the test cases generated for this program, using the boundary value analysis technique, would be for passwords with lengths 5, 6, 12 and 13. </li></random> <think> <set name = "topic">boundary value analysis</set> </think>

-^ another ?example? ^
><srai>give example <get name = "topic"/></srai>
