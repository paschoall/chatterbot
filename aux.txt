^ EXAMPLE ^ FUNCTIONAL TESTING ^	In functional testing technique, the functionality of an application is tested by providing inputs to generate the desired outputs. Consider a bus ticket purchase system with the following requirement: The discount amount is calculated as follows: students can purchase up to 100 tickets per month, with a 50% discount; workers can buy up to 50 tickets a month, with a 30% discount; other users do not have discount on the ticket price. The functional testing concentrates in selection of test input (or data test) to test this functionality, for instance, selecting test input for each class of user of the bus (student, worker and others). <think> <set name = "topic">functional testing</set> </think>			
^ EXAMPLE ^ EQUIVALENCE PARTITIONING ^	Here is an example of an application of equivalence class partitioning. Consider the following specification: one of the fields of a form is a text box that accepts numeric values from 18 to 25. For this problem, a value that belongs to an invalid equivalence class is 17, whereas a value belonging to a valid equivalence class is, for instance, 20.</li> <li>Here is an example of an application of equivalence class partitioning. Consider the following specification: a switch is turned off when the temperature falls below 18˚C and is turned on again when it begomes greater than 21˚C. In this problem, some equivalence values belonging to the same classes are 22, 23 and 24.	Here is an example of an application of equivalence class partitioning. Consider the following specification: if you are below 18 years old, you are too young to be insured. If you are between 18 and 30 years old, you will get a 20% discount, but you are not elegible for an insurance if you are past 30. In this problem, the ages 18, .., 30 are in the same equivalence class	Consider the specification. A program validates a field in the following way: values less than 10 are rejected, values between 10 and 21 are accepted and values greater or equal to 22 are rejected. In this problem, the values 3, 10 and 22 cover all the existing equivalence classes.	<think> <set name = "topic">equivalence partitioning</set> </think>
^ EXAMPLE ^ BOUNDARY VALUE ^	Suppose you have a program that grants access to a certain web page only if you are 18 years old or older. So a boundary value analysis criteria used for this program would generate test cases for age inputs of 17 and 18	Suppose you have a program in which the user has to create a password with length between 6 and 12. So the test cases generated for this program, using the boundary value analysis technique, would be for passwords with lengths 5, 6, 12 and 13. 	<think> <set name = "topic">boundary value analysis</set> </think>	
^ EXAMPLE ^ MISTAKE ^	The mistake is the act of, by some reason, introducing a defect in the software. It could be a typo while coding, which makes a for loop start from 1 instead of 0, and therefore introduce a mistake.	An example of a mistake could be a misunderstanding during the reading of the software requisistes by the developer, which makes he or she introduce a defect in the code.	<think> <set name = "topic">mistake</set> </think>	
^ EXAMPLE ^ ERROR ^	An example of an error could be the access of some unintended position of a vector, which would case a segmentation fault and stop the execution of the program.	Suppose you have a program that calculates the factorial of some input integer, but this program uses integers instead of long integers. An error would occur if you input some number that would cause an overflow in the program.	<think> <set name = "topic">error</set> </think>	
^ EXAMPLE ^ BUG ^	<srai>EXAMPLE DEFECT</srai>			
^ EXAMPLE ^ DEFECT ^	A defect is an incorrect data definition. In your code, it could be an access of inexistent position in a vector, for instance.	Suppose you have a program that, by the software requirements, should accept names with up to 20 digits, but the software developer reserved only 15 digits in the database. That is a defect in the software definition and can lead to an error.	<think> <set name = "topic">defect</set> </think>	
^ EXAMPLE ^ FAILURE ^	A failure occurs when the output of your program is different than expected. So a failure can occur when your factorial calculator program outputs an overflowed result, which is the result of an overflow error during it’s execution.	<think> <set name = "topic">failure</set> </think>		
^ EXAMPLE ^ FAULT ^	<srai>EXAMPLE DEFECT</srai>			
^ EXAMPLE ^ INPUT DOMAIN ^	Suppose you have a program that, given a date in the year outputs the sign of the person born in that day. Your input domain, in this case, is the set of all the 365 days in the year.	Suppose your input is a string with exactly 16 digits and containing only lower case letters, then the input domain consists of 26^16 possibilities	<think> <set name = "topic">input domain</set> </think>	
