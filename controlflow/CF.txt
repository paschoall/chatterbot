WHAT IS ^ ALL NODES ^	The all-nodes or all-states or block coverage criterion is a structural testing criterion which involves creating a test set such that, after the program is executed on this test set, every node of the CFG (Control Flow Graph) is visited at least once.
WHAT IS ^ ALL EDGES ^	The all-edges or  branch coverage criterion is a structural testing criterion which involves creating a test set such that, after the program is executed on this test set, every edge of the CFG (Control Flow Graph) of the program is traversed at least once. This motivates exercising different decisions in predicate nodes, as well as breaks inside loops and returns in functions. 
WHAT IS ^ ALL PATHS ^	The all-paths or pah coverage criterion is a structural testing criterion which involves creating a test set such that, after the program is executed on this test set, every possible complete path of the CFG (Control Flow Graph) of the program is traversed at least once. This is a requisite very difficult to accomplish, since the number of paths can grow exponentially, and some of them might not even be executable.
WHAT IS ^ REQUIREMENT ^ ALL NODES ^	The minimum test requirement of all-nodes or statement coverage criterion is the guarantee that all statements of the program have been executed by at least one test case.
WHAT IS ^ REQUIREMENT ^ ALL EDGES ^	The minimum test requirement of all-edges or branch coverage criterion is that every branch of control flow of the program has been executed at least once.
WHAT IS ^ REQUIREMENT ^ ALL PATHS ^	The minimum test requirement of all-paths criterions is that every path from the start node of the CFG to the exit node has been traversed at least once in the execution of a test set. 
WHAT IS * ADEQUACY CRITERIA	<srai>WHAT IS THE REQUIREMENT OF <star/></srai>
WHAT IS ^ ADEQUACY CRITERIA OF *	<srai>WHAT IS THE REQUIREMENT OF <star/></srai>
HOW * USE ALL NODES ^	To create a test set using the all-nodes criterion for your program, you first need to draw the CFG of it (ask me how to do that if you don’t know yet). Then you have to analyse, for each node of your program, what your input must look like so that this node is executed. For example, if you have an if statement such as ```if(A > 0) print(‘A is positive); ``` in your program, you know that the node corresponding to the ```print``` command will only be executed when ```A``` is positive, and so you must insert at least one test case as such. More complex programs will require a deeper analysis, which most of the times will involve more mathematics skills than software testing ones. 
HOW * APPLY ALL NODES ^	<srai>HOW TO USE ALL NODES</srai>
HOW * USE ALL EDGES ^	To create a test set using the all-edges criterion for your program, you first need to draw the CFG of it (ask me how to do that if you don’t know yet). Then, one approach for generating the test set is to analyse, for each branch of the CFG, what the input must look like so that this branch is executed. For example, if you have an IF statement such as ```if(strlen(s) == 0) break;```, you must consider at least one test case where ```s``` is empty and the edge corresponding to this ```break``` statement will be exercised.  However, this approach may be difficult and require very deep analysis for complex programs and algorithms.
HOW * APPLY ALL EDGES ^	<srai>HOW TO USE ALL NODES</srai>
HOW * USE CYCLOMATIC COMPLEXITY ^	To create a test set using the McCabe criterion, first write down a complete path always making decisions in predicate nodes to avoid loops (or the first path could be the result of a random real input). Then, the following paths should be equal to the previous one, but changing the decision of the first predicate node not changed yet. After you cannot add any more paths, you have exactly C paths, where C is the McCabe complexity of your CFG. You should create test cases the exercise this paths. This test set also has the property that it satisfies statement coverage and branch coverage criterions.
HOW * USE MCCABE ^	<srai>HOW TO USE CYCLOMATIC COMPLEXITY</srai>
